// Java implementation of the above approach
import java.util.*;

public class GFG
{
	// Function to return the required sum
	static int findMaxSum(int arr[], int n)
	{
		// Arrays for maintaining left and right count
		int CL[] = new int[n], CR[] = new int[n];
	
		// Stack for storing the indexes
		Stack<Integer> q = new Stack<Integer>();
	
		// Calculate left count for every index
		for (int i = 0; i < n; i++)
		{
			while (q.size() != 0 && arr[q.peek()] <= arr[i])
			{
				CL[i] += CL[q.peek()] + 1;
				q.pop();
			}
			q.push(i);
		}
	
		// Clear the stack
		while (q.size() != 0)
			q.pop();
	
		// Calculate right count for every index
		for (int i = n - 1; i >= 0; i--)
		{
			while (q.size() != 0 && arr[q.peek()] < arr[i])
			{
				CR[i] += CR[q.peek()] + 1;
				q.pop();
			}
			q.push(i);
		}
	
		// Clear the stack
		while (q.size() != 0)
			q.pop();
	
		// To store the required sum
		int ans = 0;
	
		// Calculate the final sum
		for (int i = 0; i < n; i++)
			ans += (CL[i] + 1) * (CR[i] + 1) * arr[i];
	
		return ans;
	}

	// Driver code
	public static void main(String[] args)
	{
		int arr[] = { 1, 3, 2 };
		int n = arr.length;
		System.out.println(findMaxSum(arr, n));
	}
}

